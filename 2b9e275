[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;22r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[H[2J[?25l[22;1H"/f/GitHub projects/Hussain projects/React/microfinance/.git/rebase-merge/git-rebase-todo" [unix] 32L, 1485B[1;1H[34mnoop

# Rebase [m[36m2b9e275[m[34m..[m[36m2b9e275[m[34m onto [m[36m2b9e275[m[34m (1 command)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's[m
[1m[7m.git/rebase-merge/git-rebase-todo [unix] (15:32 10/02/2025)                                                                                                                                                 1,1 Top[1;1H[?25h[?4m[?25l[m[22;201Hg[1;1H[?25h[?25l[22;201H [1;1H[22;201Hgi[1;1H[22;201H  [1;1H[22;1H[1m-- INSERT --[m[22;13H[K[1;1H[?25h[?25ltnoop[21;34H[1m[7m[+] [unix] (15:32 10/02/2025)[144C2 [1;2H[?25h[?25l[mgnoop[21;207H[1m[7m3 [1;3H[?25h[?25l[minoop[21;207H[1m[7m4 [1;4H[?25h[?25l[mtnoop[21;207H[1m[7m5 [1;5H[?25h[?25l[mgnoop[21;207H[1m[7m6 [1;6H[?25h[?25l[minoop[21;207H[1m[7m7 [1;7H[?25h[?25l[mtnoop[21;207H[1m[7m8 [1;8H[?25h[?25l[2;20r[m[2;1H[L[1;22r[1;8H[K[2;1H[34mnoop[m[21;205H[1m[7m2,1 [2;1H[?25h[?25l[m[22;1H[K[2;1H[?25h[?5h[?5l[?5h[?5l[?25l[22;201H^M[2;1H[22;201H  [3;1H[21;203H[1m[7m3,0-1[3;1H[?25h[?5h[?5l[?25l[m[22;201H^M[3;1H[22;201H  [4;1H[21;203H[1m[7m  4,1[4;1H[?25h[?5h[?5l[?25l[m[22;201H^M[4;1H[22;201H  [5;1H[21;205H[1m[7m5,[5;1H[?25h[?25l[m[22;201H^M[5;1H[22;201H  [6;1H[21;205H[1m[7m6,[6;1H[?25h[27m[23m[29m[m[H[2J[?25l[1;1Htgitgit
[34mnoop

# Rebase [m[36m2b9e275[m[34m..[m[36m2b9e275[m[34m onto [m[36m2b9e275[m[34m (1 command)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>][m
[1m[7m.git/rebase-merge/git-rebase-todo[+] [unix] (15:32 10/02/2025)                                                                                                                     6,1 Top[6;1H[?25h